{"version":3,"sources":["StackView.tsx"],"names":["GestureHandlerWrapper","GestureHandlerRootView","View","StackView","React","Component","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","gestureEnabled","animationEnabled","options","undefined","Platform","OS","filter","r","includes","index","findIndex","props","navigation","getComponent","SceneComponent","screenProps","isTransitioning","dispatch","StackActions","completeTransition","toChildKey","handleTransitionComplete","setState","length","find","pop","prune","Math","max","closing","onTransitionStart","onTransitionEnd","getDerivedStateFromProps","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","render","keyboardHandlingEnabled","mode","rest","headerMode","styles","container","insets","getPreviousRoute","getGesturesEnabled","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport {\n  StackActions,\n  NavigationState as StackNavigationState,\n  SceneView,\n} from 'react-navigation';\n\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport {\n  Route,\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n  screenProps: unknown;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (props.state.routes === state.previousRoutes && state.routes.length) {\n      if (props.descriptors !== state.previousDescriptors) {\n        const descriptors = state.routes.reduce<StackDescriptorMap>(\n          (acc, route) => {\n            acc[route.key] =\n              props.descriptors[route.key] || state.descriptors[route.key];\n\n            return acc;\n          },\n          {}\n        );\n\n        return {\n          previousDescriptors: props.descriptors,\n          descriptors,\n        };\n      }\n\n      return null;\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.find(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              key => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                key => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                key => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.find(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            key => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== undefined\n        ? gestureEnabled\n        : Platform.OS !== 'android';\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      r =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex(r => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    const { navigation, getComponent } = descriptor;\n    const SceneComponent = getComponent();\n\n    return (\n      <SceneView\n        screenProps={this.props.screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleTransitionComplete = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: route.key,\n        })\n      );\n    }\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    this.handleTransitionComplete({ route });\n    this.setState(state => ({\n      routes: state.replacingRouteKeys.length\n        ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key))\n        : state.routes,\n      openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n      closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n      replacingRouteKeys: [],\n    }));\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.find(r => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      // @ts-ignore\n      navigation.dispatch(StackActions.pop({ key: route.key, prune: false }));\n    } else {\n      // While closing route we need to point to the previous one assuming that\n      // this previous one in routes array\n      const index = this.state.routes.findIndex(r => r.key === route.key);\n\n      this.handleTransitionComplete({\n        route: this.state.routes[Math.max(index - 1, 0)],\n      });\n\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState(state => ({\n        routes: state.routes.filter(r => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          key => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          key => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionStart?.({ closing });\n  };\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) => {\n    const { descriptors } = this.props;\n    const descriptor =\n      descriptors[route.key] || this.state.descriptors[route.key];\n\n    descriptor?.options.onTransitionEnd?.({ closing });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    const headerMode =\n      mode !== 'modal' && Platform.OS === 'ios' ? 'float' : 'screen';\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaConsumer>\n            {insets => (\n              <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                {props => (\n                  <CardStack\n                    mode={mode}\n                    insets={insets as EdgeInsets}\n                    getPreviousRoute={this.getPreviousRoute}\n                    getGesturesEnabled={this.getGesturesEnabled}\n                    routes={routes}\n                    openingRouteKeys={openingRouteKeys}\n                    closingRouteKeys={closingRouteKeys}\n                    onOpenRoute={this.handleOpenRoute}\n                    onCloseRoute={this.handleCloseRoute}\n                    onTransitionComplete={this.handleTransitionComplete}\n                    onTransitionStart={this.handleTransitionStart}\n                    onTransitionEnd={this.handleTransitionEnd}\n                    renderHeader={this.renderHeader}\n                    renderScene={this.renderScene}\n                    headerMode={headerMode}\n                    state={state}\n                    descriptors={descriptors}\n                    {...rest}\n                    {...props}\n                  />\n                )}\n              </KeyboardManager>\n            )}\n          </SafeAreaConsumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}